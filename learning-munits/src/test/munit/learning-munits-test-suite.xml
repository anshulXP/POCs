<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="learning-munits-test-suite.xml" >
		<munit:parameterizations >
			<munit:parameterization name="firstEmployeeDesignation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="SE" />
					<munit:parameter propertyName="mock_db_payload" value='{"example": "if this format not works then we need to convert it into json string escape online and then we can use that"}' />
				</munit:parameters>
			</munit:parameterization>
			<munit:parameterization name="secondEmployeeDesidngation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="M" />
				</munit:parameters>
			</munit:parameterization>
		</munit:parameterizations>
		<munit:parameterizations >
			<munit:parameterization name="firstEmployeeDesignation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="SE" />
					<munit:parameter propertyName="mock_db_payload" value='{"example": "if this format not works then we need to convert it into json string escape online and then we can use that"}' />
				</munit:parameters>
			</munit:parameterization>
			<munit:parameterization name="secondEmployeeDesidngation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="M" />
					<munit:parameter propertyName="mock_db_payload" value='{"example": "if this format not works then we need to convert it into json string escape online and then we can use that"}' />
				</munit:parameters>
			</munit:parameterization>
		</munit:parameterizations>
		<munit:parameterizations >
			<munit:parameterization name="firstEmployeeDesignation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="SE" />
					<munit:parameter propertyName="mock_db_payload" value='{"example": "if this format not works then we need to convert it into json string escape online and then we can use that"}' />
				</munit:parameters>
			</munit:parameterization>
			<munit:parameterization name="secondEmployeeDesidngation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="M" />
					<munit:parameter propertyName="mock_db_payload" value="may be string and int is supported here" />
				</munit:parameters>
			</munit:parameterization>
		</munit:parameterizations>
		<munit:parameterizations >
			<munit:parameterization name="firstEmployeeDesignation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="SE" />
					<munit:parameter propertyName="mock_db_payload" value='{"example": "if this format not works then we need to convert it into json string escape online and then we can use that"}' />
				</munit:parameters>
			</munit:parameterization>
			<munit:parameterization name="secondEmployeeDesidngation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="M" />
					<munit:parameter propertyName="mock_db_payload" value="may be string and int is supported here" />
				</munit:parameters>
			</munit:parameterization>
		</munit:parameterizations>
		<munit:parameterizations file="learning-munits\emp-designation-parameters.yaml" >
			<munit:parameterization name="firstEmployeeDesignation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="SE" />
					<munit:parameter propertyName="mock_db_payload" value='{"example": "if this format not works then we need to convert it into json string escape online and then we can use that"}' />
				</munit:parameters>
			</munit:parameterization>
			<munit:parameterization name="secondEmployeeDesidngation" >
				<munit:parameters >
					<munit:parameter propertyName="title" value="M" />
					<munit:parameter propertyName="mock_db_payload" value="may be string and int is supported here" />
				</munit:parameters>
			</munit:parameterization>
		</munit:parameterizations>
	</munit:config>
	<munit:test name="learning-munits-test-suite-async-scope-flowTest" doc:id="b39fc1d3-9b8c-4855-ab0b-88175289d0f2" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="c1b7c435-b496-44d1-817d-95f9dcbffc40" >
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://foldername/filename')]" mediaType="application/json" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy" doc:id="05347f66-ab7c-4463-ae41-b3c3f94a8cdd" >
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert expression" doc:id="d4bafb8e-9435-4f2a-bec7-8e43604b71c3" />
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert expression" doc:id="267c4be9-c949-4752-8c33-fb382c9c0ea1" />
				</munit-tools:after-call>
			</munit-tools:spy>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="0bc66856-64c5-44ca-984d-a736b9522b37" >
				<munit:payload value="this is sample payload" />
				<munit:variables >
					<munit:variable key="x" value="10" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to async-scope-flow" doc:id="7e74f58c-0e21-4000-b287-a1672159d244" name="async-scope-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="e9d673f7-ee87-4dc0-b599-a2adc1648ff2" actual="#[payload]" expected="this is sample payload"/>
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="4e1a1083-5807-4bfe-a2ef-432fb7c4458b" actual="#[vars.x]" expected="10"/>
			<munit-tools:assert doc:name="Assert expression" doc:id="d85865c3-5711-4834-81d4-b548a426f48b" message="payload doesn't match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import learning-munits::test
---
test::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="learning-munits-test-suite-async-scope-flowTest1" doc:id="a723f42d-c64d-4fbd-b9a5-35379fd72786" description="Test">
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="301b69da-074e-48e8-9770-471ca5856667" >
				<munit:attributes value="#[readUrl('classpath://learning-munits/test_input_attributes.dwl')]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to async-scope-flow" doc:id="163b0864-3c0d-4822-81e7-734ab0c1cbf4" name="async-scope-flow"/>
		</munit:execution>
		<munit:validation >
			<logger level="INFO" doc:name="Logger" doc:id="10514fa8-014f-4b9a-9220-c4e39f9bc43a" />
			<munit-tools:assert doc:name="Assert expression" doc:id="ce66e241-64e3-4acc-abc8-f03825e3a516" >
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts 
 ---
payload must notBeNull()]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify call" doc:id="1fa911e0-b71a-4236-b945-bb59c1f8642d" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="603a857c-2ca4-44b4-a6bb-dc1e2b9efb76" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="using-parameterized-db-test-suite" doc:id="7a12a364-897d-47ad-88a4-3d2e833633ac" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock employees payload by designation" doc:id="667a00fc-5176-48d7-b7a9-055e3bc5a911" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="cb56fcbd-52f2-4722-8f28-29eaf7b1d564" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- read(Mule::p('mock_payload'),&quot;application/json&quot;)]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Setting query params needed in db call through paramterized Event" doc:id="12032557-1cdf-4a51-ae07-6d8256f76d6e" >
				<munit:attributes value="#[&quot;queryParams&quot;:{&quot;title&quot;:Mule::p('title')}]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to learning-munitsFlow" doc:id="ce15f1c4-1410-483e-a231-75adc3f2cbad" name="learning-munitsFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression" doc:id="ae80c189-48ac-4e1e-918c-7ee35f805e69" />
		</munit:validation>
	</munit:test>


</mule>
